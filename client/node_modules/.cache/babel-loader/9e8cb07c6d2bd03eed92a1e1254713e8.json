{"ast":null,"code":"var _jsxFileName = \"/Users/nessa.kennedy/myprojects/todos/client/src/components/ShowTodos.tsx\";\nimport * as React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport { deleteTodoById, getTodos } from \"../api/requests\";\nimport { useEffect } from \"react\";\nimport { useConfirm } from \"material-ui-confirm\";\nimport { TodoItem } from \"./TodoItem\";\nexport default function ShowTodos() {\n  const [todos, setTodos] = React.useState([]);\n  const [selectedTodo, setSelectedTodo] = React.useState({});\n  const confirm = useConfirm();\n  useEffect(() => {\n    getTodos().then(({\n      data: {\n        todos\n      }\n    }) => {\n      const todoList = todos;\n      setTodos(todoList);\n    }).catch(err => console.log(err));\n  });\n\n  const handleConfirmation = id => {\n    confirm({\n      description: 'This action is permanent!'\n    }).then(() => {\n      deleteTodoById(id);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, todos.map(todo => /*#__PURE__*/React.createElement(TodoItem, {\n    todo: todo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/nessa.kennedy/myprojects/todos/client/src/components/ShowTodos.tsx"],"names":["React","List","deleteTodoById","getTodos","useEffect","useConfirm","TodoItem","ShowTodos","todos","setTodos","useState","selectedTodo","setSelectedTodo","confirm","then","data","todoList","catch","err","console","log","handleConfirmation","id","description","map","todo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,IAAP,MAAiB,wBAAjB;AAGA,SAAQC,cAAR,EAAwBC,QAAxB,QAAmD,iBAAnD;AAGA,SAAkBC,SAAlB,QAAkC,OAAlC;AAIA,SAAQC,UAAR,QAAyB,qBAAzB;AAIA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,eAAe,SAASC,SAAT,GAAsB;AAEnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAwB,EAAxB,CAA1B;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,KAAK,CAACU,QAAN,CAAsB,EAAtB,CAAxC;AAGA,QAAMG,OAAO,GAAGR,UAAU,EAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZD,IAAAA,QAAQ,GACPW,IADD,CACM,CAAC;AAACC,MAAAA,IAAI,EAAE;AAACP,QAAAA;AAAD;AAAP,KAAD,KAAoC;AACxC,YAAMQ,QAAQ,GAAGR,KAAjB;AACDC,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACA,KAJD,EAKCC,KALD,CAKQC,GAAD,IAAgBC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALvB;AAQH,GAVQ,CAAT;;AAaA,QAAMG,kBAAkB,GAAIC,EAAD,IAAgB;AAEzCT,IAAAA,OAAO,CAAC;AAAEU,MAAAA,WAAW,EAAE;AAAf,KAAD,CAAP,CACCT,IADD,CACM,MAAM;AAAEZ,MAAAA,cAAc,CAACoB,EAAD,CAAd;AAAmB,KADjC;AAED,GAJD;;AAQA,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBAEL,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,CADH,CADJ;AASD","sourcesContent":["import * as React from \"react\"\nimport {ListItemText, TextField} from \"@material-ui/core\"\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport {ITodo} from \"../types/type.todo\"\nimport {deleteTodoById, getTodos, updateTodo} from \"../api/requests\"\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport {Fragment, useEffect} from \"react\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport {useConfirm} from \"material-ui-confirm\"\nimport Modal from \"@material-ui/core/Modal\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport Button from \"@material-ui/core/Button\"\nimport {TodoItem} from \"./TodoItem\"\n\nexport default function ShowTodos () {\n\n  const [todos, setTodos] = React.useState<ITodo[]>([]);\n\n  const [selectedTodo, setSelectedTodo] = React.useState<ITodo>({});\n\n\n  const confirm = useConfirm();\n\n  useEffect(() => {\n\n      getTodos()\n      .then(({data: {todos}}: ITodo[] | any) => {\n        const todoList = todos\n       setTodos(todoList)\n      })\n      .catch((err: Error) => console.log(err))\n\n\n  })\n\n\n  const handleConfirmation = (id: string) => {\n\n    confirm({ description: 'This action is permanent!' })\n    .then(() => { deleteTodoById(id)})\n  }\n\n\n\n  return (\n      <List>\n        {todos.map((todo: ITodo ) =>\n            (\n              <TodoItem todo={todo}/>)\n        )}\n      </List>\n  );\n\n}"]},"metadata":{},"sourceType":"module"}