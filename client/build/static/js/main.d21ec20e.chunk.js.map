{
  "version": 3,
  "sources": [
    "components/AppHeader.tsx",
    "components/AddTodo.tsx",
    "pages/Home.js",
    "App.tsx",
    "serviceWorker.js",
    "index.tsx"
  ],
  "names": [
    "AppHeader",
    "AppBar",
    "position",
    "Toolbar",
    "Typography",
    "variant",
    "color",
    "AddTodo",
    "React",
    "todo",
    "setTodoValue",
    "Paper",
    "FormControl",
    "InputLabel",
    "htmlFor",
    "OutlinedInput",
    "id",
    "value",
    "onChange",
    "event",
    "target",
    "label",
    "Button",
    "size",
    "type",
    "withStyles",
    "theme",
    "main",
    "padding",
    "spacing",
    "breakpoints",
    "down",
    "CssBaseline",
    "Route",
    "exact",
    "path",
    "component",
    "Home",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error",
    "console",
    "message"
  ],
  "mappings": "8PAiBeA,EAVG,kBACd,gBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,mB,gDCHO,SAASC,IAAY,IAAD,EAEJC,WAAuB,cAFnB,mBAE1BC,EAF0B,KAEpBC,EAFoB,KAgB/B,OACI,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAaP,QAAQ,YACnB,gBAACQ,EAAA,EAAD,CAAYC,QAAQ,sBAApB,OACA,gBAACC,EAAA,EAAD,CAAeC,GAAG,qBAAqBC,MAAOR,EAAMS,SAfzC,SAACC,GACpB,IAAMF,EAAQE,EAAMC,OAAOH,MAC3BP,EAAaO,IAauEI,MAAM,SAClF,gBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAK,UAA1B,SCtBG,wBACX,6BACA,kBAACpB,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACA,kBAACE,EAAD,Q,gBCoBWkB,eAjBA,SAAAC,GAAK,MAAK,CACvBC,KAAK,aACHC,QAASF,EAAMG,QAAQ,IACtBH,EAAMI,YAAYC,KAAK,MAAQ,CAC9BH,QAASF,EAAMG,QAAQ,QAadJ,EARH,kBACR,gBAAC,IAAD,KACE,gBAACO,EAAA,EAAD,MACA,gBAAC,EAAD,MACD,gBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,QCblBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,SACI,gBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c",
  "file": "static/js/main.d21ec20e.chunk.js",
  "sourcesContent": [
    "import * as React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nconst AppHeader = () => (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\">\n          My React App\n        </Typography>\n      </Toolbar>\n    </AppBar>\n);\n\nexport default AppHeader;",
    "import FormControl from \"@material-ui/core/FormControl\"\n\nimport * as React from \"react\"\nimport {Button, OutlinedInput} from \"@material-ui/core\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport Paper from \"@material-ui/core/Paper\"\n\nexport default function AddTodo () {\n\n  const [todo, setTodoValue] = React.useState<string>(\"no problem\");\n\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setTodoValue(value);\n  };\n\n\n  const onSubmit = () => {\n\n  };\n\n\n    return (\n        <Paper>\n          <FormControl variant=\"outlined\">\n            <InputLabel htmlFor=\"component-outlined\">Add</InputLabel>\n            <OutlinedInput id=\"component-outlined\" value={todo} onChange={handleChange} label=\"ToDo\" />\n            <Button size=\"small\" type=\"submit\">\n              Add\n            </Button>\n          </FormControl>\n        </Paper>\n    );\n\n}",
    "import React from 'react';\nimport {\n  Typography,\n} from '@material-ui/core';\nimport AddTodo from \"../components/AddTodo\";\n\nexport default () => (\n    <div>\n    <Typography variant=\"h4\">Welcome Home!</Typography>\n    <AddTodo />\n    </div>\n);",
    "import {\n  CssBaseline,\n  withStyles,\n} from '@material-ui/core';\nimport * as React from 'react'\n\nimport AppHeader from './components/AppHeader';\nimport Home from './pages/Home';\nimport Route from \"react-router-dom/es/Route\";\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst styles = theme => ({\n  main: {\n    padding: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(2),\n    },\n  },\n});\n\nconst App = () => (\n    <BrowserRouter>\n      <CssBaseline />\n      <AppHeader />\n     <Route exact path=\"/\" component={Home} />\n    </BrowserRouter>\n);\n\nexport default withStyles(styles)(App);",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}